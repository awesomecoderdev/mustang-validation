<?php

/**
 * BankDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mustangserver
 *
 * Mustangproject e-invoice REST server API
 *
 * OpenAPI spec version: v0.7.0
 * Contact: jstaerk@usegroup.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BankDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'BankDetails';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'account_name' => 'string',
        'own_iban' => 'string',
        'own_bic' => 'string',
        'bic' => 'string',
        'iban' => 'string',
        'settlement_xml' => 'string',
        'own_payment_info_text' => 'string',
        'payment_xml' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'account_name' => null,
        'own_iban' => null,
        'own_bic' => null,
        'bic' => null,
        'iban' => null,
        'settlement_xml' => null,
        'own_payment_info_text' => null,
        'payment_xml' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'accountName',
        'own_iban' => 'ownIBAN',
        'own_bic' => 'ownBIC',
        'bic' => 'bic',
        'iban' => 'iban',
        'settlement_xml' => 'settlementXML',
        'own_payment_info_text' => 'ownPaymentInfoText',
        'payment_xml' => 'paymentXML'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'own_iban' => 'setOwnIban',
        'own_bic' => 'setOwnBic',
        'bic' => 'setBic',
        'iban' => 'setIban',
        'settlement_xml' => 'setSettlementXml',
        'own_payment_info_text' => 'setOwnPaymentInfoText',
        'payment_xml' => 'setPaymentXml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'own_iban' => 'getOwnIban',
        'own_bic' => 'getOwnBic',
        'bic' => 'getBic',
        'iban' => 'getIban',
        'settlement_xml' => 'getSettlementXml',
        'own_payment_info_text' => 'getOwnPaymentInfoText',
        'payment_xml' => 'getPaymentXml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['own_iban'] = isset($data['own_iban']) ? $data['own_iban'] : null;
        $this->container['own_bic'] = isset($data['own_bic']) ? $data['own_bic'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['settlement_xml'] = isset($data['settlement_xml']) ? $data['settlement_xml'] : null;
        $this->container['own_payment_info_text'] = isset($data['own_payment_info_text']) ? $data['own_payment_info_text'] : null;
        $this->container['payment_xml'] = isset($data['payment_xml']) ? $data['payment_xml'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets own_iban
     *
     * @return string
     */
    public function getOwnIban()
    {
        return $this->container['own_iban'];
    }

    /**
     * Sets own_iban
     *
     * @param string $own_iban own_iban
     *
     * @return $this
     */
    public function setOwnIban($own_iban)
    {
        $this->container['own_iban'] = $own_iban;

        return $this;
    }

    /**
     * Gets own_bic
     *
     * @return string
     */
    public function getOwnBic()
    {
        return $this->container['own_bic'];
    }

    /**
     * Sets own_bic
     *
     * @param string $own_bic own_bic
     *
     * @return $this
     */
    public function setOwnBic($own_bic)
    {
        $this->container['own_bic'] = $own_bic;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic bic
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets settlement_xml
     *
     * @return string
     */
    public function getSettlementXml()
    {
        return $this->container['settlement_xml'];
    }

    /**
     * Sets settlement_xml
     *
     * @param string $settlement_xml settlement_xml
     *
     * @return $this
     */
    public function setSettlementXml($settlement_xml)
    {
        $this->container['settlement_xml'] = $settlement_xml;

        return $this;
    }

    /**
     * Gets own_payment_info_text
     *
     * @return string
     */
    public function getOwnPaymentInfoText()
    {
        return $this->container['own_payment_info_text'];
    }

    /**
     * Sets own_payment_info_text
     *
     * @param string $own_payment_info_text own_payment_info_text
     *
     * @return $this
     */
    public function setOwnPaymentInfoText($own_payment_info_text)
    {
        $this->container['own_payment_info_text'] = $own_payment_info_text;

        return $this;
    }

    /**
     * Gets payment_xml
     *
     * @return string
     */
    public function getPaymentXml()
    {
        return $this->container['payment_xml'];
    }

    /**
     * Sets payment_xml
     *
     * @param string $payment_xml payment_xml
     *
     * @return $this
     */
    public function setPaymentXml($payment_xml)
    {
        $this->container['payment_xml'] = $payment_xml;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

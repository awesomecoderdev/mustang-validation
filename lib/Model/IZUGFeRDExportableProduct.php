<?php
/**
 * IZUGFeRDExportableProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mustangserver
 *
 * Mustangproject e-invoice REST server API
 *
 * OpenAPI spec version: v0.7.0
 * Contact: jstaerk@usegroup.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IZUGFeRDExportableProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IZUGFeRDExportableProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IZUGFeRDExportableProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'global_id' => 'string',
'global_id_scheme' => 'string',
'reverse_charge' => 'bool',
'intra_community_supply' => 'bool',
'vatpercent' => 'float',
'seller_assigned_id' => 'string',
'buyer_assigned_id' => 'string',
'tax_category_code' => 'string',
'tax_exemption_reason' => 'string',
'description' => 'string',
'unit' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'global_id' => null,
'global_id_scheme' => null,
'reverse_charge' => null,
'intra_community_supply' => null,
'vatpercent' => null,
'seller_assigned_id' => null,
'buyer_assigned_id' => null,
'tax_category_code' => null,
'tax_exemption_reason' => null,
'description' => null,
'unit' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'global_id' => 'globalID',
'global_id_scheme' => 'globalIDScheme',
'reverse_charge' => 'reverseCharge',
'intra_community_supply' => 'intraCommunitySupply',
'vatpercent' => 'vatpercent',
'seller_assigned_id' => 'sellerAssignedID',
'buyer_assigned_id' => 'buyerAssignedID',
'tax_category_code' => 'taxCategoryCode',
'tax_exemption_reason' => 'taxExemptionReason',
'description' => 'description',
'unit' => 'unit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'global_id' => 'setGlobalId',
'global_id_scheme' => 'setGlobalIdScheme',
'reverse_charge' => 'setReverseCharge',
'intra_community_supply' => 'setIntraCommunitySupply',
'vatpercent' => 'setVatpercent',
'seller_assigned_id' => 'setSellerAssignedId',
'buyer_assigned_id' => 'setBuyerAssignedId',
'tax_category_code' => 'setTaxCategoryCode',
'tax_exemption_reason' => 'setTaxExemptionReason',
'description' => 'setDescription',
'unit' => 'setUnit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'global_id' => 'getGlobalId',
'global_id_scheme' => 'getGlobalIdScheme',
'reverse_charge' => 'getReverseCharge',
'intra_community_supply' => 'getIntraCommunitySupply',
'vatpercent' => 'getVatpercent',
'seller_assigned_id' => 'getSellerAssignedId',
'buyer_assigned_id' => 'getBuyerAssignedId',
'tax_category_code' => 'getTaxCategoryCode',
'tax_exemption_reason' => 'getTaxExemptionReason',
'description' => 'getDescription',
'unit' => 'getUnit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['global_id'] = isset($data['global_id']) ? $data['global_id'] : null;
        $this->container['global_id_scheme'] = isset($data['global_id_scheme']) ? $data['global_id_scheme'] : null;
        $this->container['reverse_charge'] = isset($data['reverse_charge']) ? $data['reverse_charge'] : null;
        $this->container['intra_community_supply'] = isset($data['intra_community_supply']) ? $data['intra_community_supply'] : null;
        $this->container['vatpercent'] = isset($data['vatpercent']) ? $data['vatpercent'] : null;
        $this->container['seller_assigned_id'] = isset($data['seller_assigned_id']) ? $data['seller_assigned_id'] : null;
        $this->container['buyer_assigned_id'] = isset($data['buyer_assigned_id']) ? $data['buyer_assigned_id'] : null;
        $this->container['tax_category_code'] = isset($data['tax_category_code']) ? $data['tax_category_code'] : null;
        $this->container['tax_exemption_reason'] = isset($data['tax_exemption_reason']) ? $data['tax_exemption_reason'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets global_id
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['global_id'];
    }

    /**
     * Sets global_id
     *
     * @param string $global_id global_id
     *
     * @return $this
     */
    public function setGlobalId($global_id)
    {
        $this->container['global_id'] = $global_id;

        return $this;
    }

    /**
     * Gets global_id_scheme
     *
     * @return string
     */
    public function getGlobalIdScheme()
    {
        return $this->container['global_id_scheme'];
    }

    /**
     * Sets global_id_scheme
     *
     * @param string $global_id_scheme global_id_scheme
     *
     * @return $this
     */
    public function setGlobalIdScheme($global_id_scheme)
    {
        $this->container['global_id_scheme'] = $global_id_scheme;

        return $this;
    }

    /**
     * Gets reverse_charge
     *
     * @return bool
     */
    public function getReverseCharge()
    {
        return $this->container['reverse_charge'];
    }

    /**
     * Sets reverse_charge
     *
     * @param bool $reverse_charge reverse_charge
     *
     * @return $this
     */
    public function setReverseCharge($reverse_charge)
    {
        $this->container['reverse_charge'] = $reverse_charge;

        return $this;
    }

    /**
     * Gets intra_community_supply
     *
     * @return bool
     */
    public function getIntraCommunitySupply()
    {
        return $this->container['intra_community_supply'];
    }

    /**
     * Sets intra_community_supply
     *
     * @param bool $intra_community_supply intra_community_supply
     *
     * @return $this
     */
    public function setIntraCommunitySupply($intra_community_supply)
    {
        $this->container['intra_community_supply'] = $intra_community_supply;

        return $this;
    }

    /**
     * Gets vatpercent
     *
     * @return float
     */
    public function getVatpercent()
    {
        return $this->container['vatpercent'];
    }

    /**
     * Sets vatpercent
     *
     * @param float $vatpercent vatpercent
     *
     * @return $this
     */
    public function setVatpercent($vatpercent)
    {
        $this->container['vatpercent'] = $vatpercent;

        return $this;
    }

    /**
     * Gets seller_assigned_id
     *
     * @return string
     */
    public function getSellerAssignedId()
    {
        return $this->container['seller_assigned_id'];
    }

    /**
     * Sets seller_assigned_id
     *
     * @param string $seller_assigned_id seller_assigned_id
     *
     * @return $this
     */
    public function setSellerAssignedId($seller_assigned_id)
    {
        $this->container['seller_assigned_id'] = $seller_assigned_id;

        return $this;
    }

    /**
     * Gets buyer_assigned_id
     *
     * @return string
     */
    public function getBuyerAssignedId()
    {
        return $this->container['buyer_assigned_id'];
    }

    /**
     * Sets buyer_assigned_id
     *
     * @param string $buyer_assigned_id buyer_assigned_id
     *
     * @return $this
     */
    public function setBuyerAssignedId($buyer_assigned_id)
    {
        $this->container['buyer_assigned_id'] = $buyer_assigned_id;

        return $this;
    }

    /**
     * Gets tax_category_code
     *
     * @return string
     */
    public function getTaxCategoryCode()
    {
        return $this->container['tax_category_code'];
    }

    /**
     * Sets tax_category_code
     *
     * @param string $tax_category_code tax_category_code
     *
     * @return $this
     */
    public function setTaxCategoryCode($tax_category_code)
    {
        $this->container['tax_category_code'] = $tax_category_code;

        return $this;
    }

    /**
     * Gets tax_exemption_reason
     *
     * @return string
     */
    public function getTaxExemptionReason()
    {
        return $this->container['tax_exemption_reason'];
    }

    /**
     * Sets tax_exemption_reason
     *
     * @param string $tax_exemption_reason tax_exemption_reason
     *
     * @return $this
     */
    public function setTaxExemptionReason($tax_exemption_reason)
    {
        $this->container['tax_exemption_reason'] = $tax_exemption_reason;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

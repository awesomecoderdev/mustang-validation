<?php
/**
 * IZUGFeRDExportableTradeParty
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mustangserver
 *
 * Mustangproject e-invoice REST server API
 *
 * OpenAPI spec version: v0.7.0
 * Contact: jstaerk@usegroup.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IZUGFeRDExportableTradeParty Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IZUGFeRDExportableTradeParty implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IZUGFeRDExportableTradeParty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
'id' => 'string',
'name' => 'string',
'location' => 'string',
'global_id' => 'string',
'additional_address' => 'string',
'legal_organisation' => '\Swagger\Client\Model\IZUGFeRDLegalOrganisation',
'global_id_scheme' => 'string',
'tax_id' => 'string',
'vatid' => 'string',
'street' => 'string',
'zip' => 'string',
'contact' => '\Swagger\Client\Model\IZUGFeRDExportableContact'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
'id' => null,
'name' => null,
'location' => null,
'global_id' => null,
'additional_address' => null,
'legal_organisation' => null,
'global_id_scheme' => null,
'tax_id' => null,
'vatid' => null,
'street' => null,
'zip' => null,
'contact' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
'id' => 'id',
'name' => 'name',
'location' => 'location',
'global_id' => 'globalID',
'additional_address' => 'additionalAddress',
'legal_organisation' => 'legalOrganisation',
'global_id_scheme' => 'globalIDScheme',
'tax_id' => 'taxID',
'vatid' => 'vatid',
'street' => 'street',
'zip' => 'zip',
'contact' => 'contact'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
'id' => 'setId',
'name' => 'setName',
'location' => 'setLocation',
'global_id' => 'setGlobalId',
'additional_address' => 'setAdditionalAddress',
'legal_organisation' => 'setLegalOrganisation',
'global_id_scheme' => 'setGlobalIdScheme',
'tax_id' => 'setTaxId',
'vatid' => 'setVatid',
'street' => 'setStreet',
'zip' => 'setZip',
'contact' => 'setContact'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
'id' => 'getId',
'name' => 'getName',
'location' => 'getLocation',
'global_id' => 'getGlobalId',
'additional_address' => 'getAdditionalAddress',
'legal_organisation' => 'getLegalOrganisation',
'global_id_scheme' => 'getGlobalIdScheme',
'tax_id' => 'getTaxId',
'vatid' => 'getVatid',
'street' => 'getStreet',
'zip' => 'getZip',
'contact' => 'getContact'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['global_id'] = isset($data['global_id']) ? $data['global_id'] : null;
        $this->container['additional_address'] = isset($data['additional_address']) ? $data['additional_address'] : null;
        $this->container['legal_organisation'] = isset($data['legal_organisation']) ? $data['legal_organisation'] : null;
        $this->container['global_id_scheme'] = isset($data['global_id_scheme']) ? $data['global_id_scheme'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['vatid'] = isset($data['vatid']) ? $data['vatid'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets global_id
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['global_id'];
    }

    /**
     * Sets global_id
     *
     * @param string $global_id global_id
     *
     * @return $this
     */
    public function setGlobalId($global_id)
    {
        $this->container['global_id'] = $global_id;

        return $this;
    }

    /**
     * Gets additional_address
     *
     * @return string
     */
    public function getAdditionalAddress()
    {
        return $this->container['additional_address'];
    }

    /**
     * Sets additional_address
     *
     * @param string $additional_address additional_address
     *
     * @return $this
     */
    public function setAdditionalAddress($additional_address)
    {
        $this->container['additional_address'] = $additional_address;

        return $this;
    }

    /**
     * Gets legal_organisation
     *
     * @return \Swagger\Client\Model\IZUGFeRDLegalOrganisation
     */
    public function getLegalOrganisation()
    {
        return $this->container['legal_organisation'];
    }

    /**
     * Sets legal_organisation
     *
     * @param \Swagger\Client\Model\IZUGFeRDLegalOrganisation $legal_organisation legal_organisation
     *
     * @return $this
     */
    public function setLegalOrganisation($legal_organisation)
    {
        $this->container['legal_organisation'] = $legal_organisation;

        return $this;
    }

    /**
     * Gets global_id_scheme
     *
     * @return string
     */
    public function getGlobalIdScheme()
    {
        return $this->container['global_id_scheme'];
    }

    /**
     * Sets global_id_scheme
     *
     * @param string $global_id_scheme global_id_scheme
     *
     * @return $this
     */
    public function setGlobalIdScheme($global_id_scheme)
    {
        $this->container['global_id_scheme'] = $global_id_scheme;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets vatid
     *
     * @return string
     */
    public function getVatid()
    {
        return $this->container['vatid'];
    }

    /**
     * Sets vatid
     *
     * @param string $vatid vatid
     *
     * @return $this
     */
    public function setVatid($vatid)
    {
        $this->container['vatid'] = $vatid;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\IZUGFeRDExportableContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\IZUGFeRDExportableContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
